"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawnChildProc = void 0;
const spawnAsync_1 = require("../../../utils/spawnAsync");
function spawnChildProc(jsFilePath, options, spawnEnv, printStdout, stdoutTransform, printStderr, stderrTransform, commandsCollector) {
    return __awaiter(this, void 0, void 0, function* () {
        const resultEnv = Object.assign(Object.assign({}, spawnEnv), { PATH: process.env.PATH });
        const res = yield (0, spawnAsync_1.spawnAsync)('node', [jsFilePath], {
            timeout: options.timeoutMs,
            env: resultEnv,
            cwd: options.workingDir,
            printStdout,
            stdoutTransform,
            printStderr,
            stderrTransform,
            onSpawn: child => {
                if (commandsCollector.stdoutParsingStream) {
                    child.stdout.pipe(commandsCollector.stdoutParsingStream);
                }
                if (commandsCollector.stderrParsingStream) {
                    child.stderr.pipe(commandsCollector.stderrParsingStream);
                }
            }
        });
        yield commandsCollector.waitUntilStreamsAreClosed();
        return res;
    });
}
exports.spawnChildProc = spawnChildProc;
//# sourceMappingURL=spawnChildProc.js.map