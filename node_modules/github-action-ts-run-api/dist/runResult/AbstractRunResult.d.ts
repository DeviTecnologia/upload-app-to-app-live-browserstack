import { RunResultInterface } from "./RunResultInterface";
import { ParsedCommandsInterface } from "./ParsedCommandsInterface";
import { OptionalRunnerDirInterface } from "../githubServiceFiles/runnerDir/RunnerDirInterface";
import { WarningsArray } from "./warnings/WarningsArray";
export declare abstract class AbstractRunResult implements RunResultInterface {
    readonly commands: ParsedCommandsInterface;
    readonly error: Error | any | undefined;
    readonly durationMs: number;
    readonly isTimedOut: boolean;
    readonly exitCode: number | undefined;
    readonly stdout: string | undefined;
    readonly stderr: string | undefined;
    readonly warnings: WarningsArray;
    private readonly tempDir;
    private readonly workspaceDir;
    readonly isSuccess: boolean;
    protected constructor(commands: ParsedCommandsInterface, error: Error | any | undefined, durationMs: number, isTimedOut: boolean, exitCode: number | undefined, stdout: string | undefined, stderr: string | undefined, warnings: WarningsArray, tempDir: OptionalRunnerDirInterface, workspaceDir: OptionalRunnerDirInterface);
    get tempDirPath(): string | undefined;
    get workspaceDirPath(): string | undefined;
    cleanUpFakedDirs(): this;
}
//# sourceMappingURL=AbstractRunResult.d.ts.map